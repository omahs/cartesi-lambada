name: Build Docker Containers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: depot-ubuntu-22.04-4

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Depot CLI
      uses: depot/setup-action@v1
      env:
        DEPOT_TOKEN: ${{ secrets.DEPOT_API_TOKEN }}

    - name: Build Docker image with Depot (local load)
      run: |
        depot build . \
          --project 2g4vskn96j \
          --file Dockerfile \
          --tag ${{ env.REGISTRY }}/${{ github.repository }}:latest \
          --platform linux/amd64 \
          --build-arg ARCH=amd64 \
          --load \
          --cache-from type=gha,scope=build-amd64 \
          --cache-to type=gha,mode=max,scope=build-amd64
      env:
        DEPOT_TOKEN: ${{ secrets.DEPOT_API_TOKEN }}

    - name: Run Docker container
      run: docker run -p 127.0.0.1:3033:3033 -v $PWD/data:/data -e RUN_TESTS=true ${{ env.REGISTRY }}/${{ github.repository }}:latest

    - name: Copy and handle logs
      if: ${{ always() }}
      run: |
        CONTAINER_ID=$(docker ps -aq --latest --filter "status=exited")
        if [ -z "$CONTAINER_ID" ]; then
          echo "No recently exited containers found."
          exit 1
        fi
        docker cp $CONTAINER_ID:/tmp/ /tmp/container_tmp/
        mkdir -p /tmp/logs
        find /tmp/container_tmp/ -name "*.log" -exec mv {} /tmp/logs/ \;
        if [ "$(ls -A /tmp/logs/)" ]; then
          zip -j /tmp/log-files.zip /tmp/logs/*.log
          echo "Logs zipped successfully."
        else
          echo "No log files found"
        fi

    - name: Upload logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: log-files.zip
        path: /tmp/log-files.zip

    - name: Push Docker image with Depot
      if: github.ref == 'refs/heads/main'
      run: |
        depot build . \
          --project 2g4vskn96j \
          --file Dockerfile \
          --tag ${{ env.REGISTRY }}/${{ github.repository }}:latest \
          --platform linux/amd64 \
          --build-arg ARCH=amd64 \
          --cache-from type=gha,scope=build-amd64 \
          --cache-to type=gha,mode=max,scope=build-amd64 \
          --push
      env:
        DEPOT_TOKEN: ${{ secrets.DEPOT_API_TOKEN }}
